 [x]- implement incremental scanner with extra level of look ahead to check for anonymous function
 [x]   - makeToken_ needs to allocate a new string object if its an identifier (not if its a keyword)
 [x]- decide what to do about statement level anonymous functions: rewind scanner or swap anonymous function symbol to @ or $ -- rewind is nicer!

 [x]- garbage collection
 [x]- undo rewind work. uncaptured executed anon functions are now not supported - consider do block?

 [x]- for loops
 [x]- for expression using expression block accumulation
 []- fix local variable reference e.g. in echo ""+for i in 0:10 {2*i}; # local for loop outputVar points to ""!
      [x]- Larger issue with local var references, assumes that stack contains only locals by the time each one executes
          Actually, expressions like "a"+{var b="b" .... } has a literal on the stack, which offsets the locals.
          How do we know when pushing to the stack whether it will remain?
      [x] Create a separate locals array
        [] Can't use vector because it might realloc somewhere else
           Can upvalue local reference span a function context? if so, also a bad idea.
           -> Use a secondary global stack (more efficient anyway, but troublesome for generators later)
        [] Why do we iterate when closing upvalues? But emit 1 opcode per upvalue.

TODO investigation with main code:
  - can close_upvalue close multiple upvalues?
  - how does local indexing (e.g. GET_LOCAL) work when you can have multiple function's locals stacked up in the stack


      [] Check locals aren't garbage collected
      [] Check locals enclose correctly. I'm assuming the local index assignment to upvalue is correct
      [] Check nonLocal upvalues (upvalues of upvalues) indices are correct when forming closure
 []- check zeroth stack element is correct. filename until first function call, then becomes destroyed?
 []- expression block should create a scope rather than define globals when used on top level
 []- functions: len, toString
 []- for expression using break value
 []- for loop on list
 []- same for while loop
 []- list get/set by index
 []- bytecode intermediate format, output/input from file
 []- replace all stdlib stuff with c from lox impl so it can be wasmd
 []- intermediate format can be used to generate syntax highlighting

 []- continue following book from 25.4.4
 []- test for multiple upvalues captured - editing changes all references
 []- error types - @ catch block after function  -- does return output a value or return from surrounding function?
 []- better internal error management (reified errors)
 []- 
 []- structs / objects
 []- peel off callframes when used as continuations/generators

ideas
 []- usage as preprocessor with -pp
 []- simple standard lib:
    - stdin
    - fileio
 []- rest server
 []- c++ interop with abstract classes